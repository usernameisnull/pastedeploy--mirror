在环境上的位置:
     /root/pastedeploy
跑测试代码:
	apt-get install python-pytest
	pip install pytest-cov
    cd /root/pastedeploy
	py.test tests
    
===setuptools里如何控制python setup.py install生成zip格式的单个文件还是目录
    setup.py里的这一句:
    zip_safe=False,
---
/usr/local/lib/python2.7/dist-packages/FakeApp-1.0-py2.7.egg zip格式的文件

root@ubuntu:/usr/local/lib/python2.7/dist-packages# file FakeApp-1.0-py2.7.egg 
FakeApp-1.0-py2.7.egg: Zip archive data, at least v2.0 to extract
---
PasteDeploy-1.5.2-py2.7.egg目录:

root@ubuntu:/usr/local/lib/python2.7/dist-packages# cd PasteDeploy-1.5.2-py2.7.egg/
root@ubuntu:/usr/local/lib/python2.7/dist-packages/PasteDeploy-1.5.2-py2.7.egg#
===

===loadapp('config:sample_configs/basic_app.ini', relative_to=here) ??????, ??????name
   ????????2?????
    1. loadapp('config:sample_configs/basic_app.ini#main', relative_to=here)
    2. loadapp('config:sample_configs/basic_app.ini', relative_to=here, name="main")
   name??main
   
   ?????????seciont???????/usr/local/lib/python2.7/dist-packages/FakeApp-1.0-py2.7.egg/EGG-INFO/engry-points.txt???????
    ?????section
    [application:main]
    use = egg:FakeApp#basic_app  #(1): 这里的basic_app与(2)保持一致
   
   engry-points.txt:
    [paste.app_factory]                                                                                                                                                   
     basic_app=fakeapp.apps:make_basic_app      #(2): "="号前面的basic_app与(1)保持一致                                                                          
     other=fakeapp.apps:make_basic_app2                                            
     configed=fakeapp.configapps:SimpleApp.make_app
===

===当使用ConfigLoader的时候怎样从EGG-INFO/engry-points.txt得到对应的函数
     大致的流程是这样的
     以tests/mabing.py为例:
        from paste.deploy import loadapp                                                                                             
        import os                                                                           
        here = "."                                                                          
        result = loadapp('config:sample_configs/basic_app.ini', relative_to=here)
        
     这个ini对应的section如下(没有名字的时候,默认为main):
        [application:main]
        use = egg:FakeApp#basic_app
        
     paste.deploy.loadapp->loadobj->loadcontext->_loadconfig->ConfigLoader.getcontext
     loadobj里的create()也就是用ConfigLoader.getcontext返回的context的create<-laodcontext<-_loadconfig<-
     
     ConfigLoader.getcontext和loadcontext都跑了2次
     278 uri = config:sample_configs/basic_app.ini
     406 name = main
     406 name = egg:FakeApp#basic_app1
     278 uri = egg:FakeApp#basic_app1--> 从这里调了EggLoader
     456: context = <class 'paste.deploy.loadwsgi.LoaderContext'>
     471: context = <class 'paste.deploy.loadwsgi.LoaderContext'>
     272,context = <class 'paste.deploy.loadwsgi.LoaderContext'>
     <function basic_app at 0x7f8aec1c0578> <type 'function'>
     def basic_app(environ, start_response):
        return simple_app('basic app', environ, start_response
        
    最终的create是调用了_APP.invoke
        
    
    
    
   